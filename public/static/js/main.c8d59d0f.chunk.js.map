{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","name","date_local","success","id","className","format","to","MissionKey","style","width","height","display","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","message","launches","map","key","LAUNCH_QUERY","Launch","useParams","variables","flight_number","details","links","youtube_id","wikipedia","href","alt","position","paddingBottom","paddingTop","src","frameBorder","allow","allowFullScreen","title","top","left","client","ApolloClient","uri","cache","InMemoryCache","App","logo","margin","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c8d59d0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst LaunchItem = ({\n  launch: { name, date_local, success, id },\n}) => {\n  return (\n    <div className='card border-secondary text-white card-body mb-3'>\n      <div className='row'>\n        <div className='col-md-9'>\n          <h4 className='card-title'>\n            Mission:{' '}\n            <span className={success ? 'text-success' : 'text-danger'}>\n              {name}\n            </span>\n          </h4>\n          <p className='card-text'>\n            Date: <Moment format='YYYY-MM-DD HH:mm'>{date_local}</Moment>\n          </p>\n        </div>\n        <div className='col-md-3'>\n          <Link to={`/launch/${id}`} className='btn btn-primary btn-lg'>Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaunchItem;\n","import React from 'react';\n\nconst MissionKey = () => {\n  return (\n    <div className='my-3'>\n      <p>\n        <span\n          className='px-3 mr-2 bg-success'\n          style={{ width: 40, height: 12, display: 'inline-block' }}\n        ></span>{' '}\n        = Success\n      </p>\n      <p>\n        <span\n          className='px-3 mr-2 bg-danger'\n          style={{ width: 40, height: 12, display: 'inline-block' }}\n        />{' '}\n        = Fail\n      </p>\n    </div>\n  );\n};\n\nexport default MissionKey;\n","import React, { Fragment } from 'react';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nimport { gql, useQuery } from '@apollo/client';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      name\n      date_local\n      success\n      details\n      id\n    }\n  }\n`;\n\nconst Launches = () => {\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <Fragment>\n      <MissionKey />\n      <h1 className='display-4 my-3'>Launches</h1>\n      {data.launches.map((launch) => (\n        <LaunchItem key={launch.id} launch={launch} />\n      ))}\n    </Fragment>\n  );\n};\n\nexport default Launches;\n","import React, { Fragment } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport { gql, useQuery } from '@apollo/client';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($id: String!) {\n    launch(id: $id) {\n      flight_number\n      name\n      date_local\n      success\n      details\n      links {\n        youtube_id\n        wikipedia\n      }\n    }\n  }\n`;\n\nconst Launch = () => {\n  let { id } = useParams();\n\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: { id },\n  });\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  const {\n    flight_number,\n    name,\n    date_local,\n    success,\n    details,\n    links: { youtube_id, wikipedia },\n  } = data.launch;\n\n  return (\n    <Fragment>\n      <h1 className='display-4 my-3'>\n        <span className='text-dark'>Name:</span> {name}\n      </h1>\n      <h4 className='mb-3'>Details:</h4>\n      <ul className='list-group'>\n        <li className='list-group-item'>Flight Number: {flight_number}</li>\n        <li className='list-group-item'>\n          Launch Date: <Moment format='YYYY-MM-DD HH:mm'>{date_local}</Moment>\n        </li>\n        <li className='list-group-item'>\n          Launch Successful:{' '}\n          <span className={success ? 'text-success' : 'text-danger'}>\n            {success ? 'Yes' : 'No'}\n          </span>\n        </li>\n        <li className='list-group-item'>\n          Details:{' '}{details}\n        </li>\n        <li className='list-group-item'>\n          Wikipedia:{' '}\n          <span>\n            <a href={wikipedia} alt={wikipedia}>{wikipedia}</a>\n          </span>\n        </li>\n      </ul>\n\n      <h4 className='my-3'>{}</h4>\n      <div\n        style={{\n          position: 'relative',\n          paddingBottom: '56.25%',\n          paddingTop: 25,\n          height: 0,\n        }}\n      >\n        <iframe\n          src={`https://www.youtube.com/embed/${youtube_id}`}\n          frameBorder='0'\n          allow='autoplay; encrypted-media'\n          allowFullScreen\n          title='video'\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n          }}\n        />\n      </div>\n\n      <hr />\n      <Link to='/' className='btn btn-secondary'>\n        Back\n      </Link>\n    </Fragment>\n  );\n};\n\nexport default Launch;\n","import React from 'react';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\nimport logo from './logo.png';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className='container'>\n          <img\n            src={logo}\n            alt='SpaceX'\n            style={{ width: 300, display: 'block', margin: 'auto' }}\n          />\n          <Route exact path='/' component={Launches} />\n          <Route exact path=\"/launch/:id\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}